{"version":3,"sources":["data/QuotesArray.js","components/QuoteGenerator.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["theQuotes","quote","author","QuoteGenerator","color","randomcolor","useState","quotes","setQuotes","generateQuoteIndex","Math","floor","random","length","backgroundColor","minH","padding","sm","md","lg","xl","display","flexDirection","fontSize","alignSelf","justifyContent","as","target","variant","href","aria-label","icon","margin","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAAaA,EAAY,CACrB,CAACC,MAAM,kGACJC,OAAO,kBACV,CAACD,MAAM,0KACJC,OAAO,cACV,CAACD,MAAM,6EAA+EC,OAAO,qBAC7F,CAACD,MAAM,6IACJC,OAAO,iBACV,CAACD,MAAM,iHACJC,OAAO,iBACV,CAACD,MAAM,4DAA8DC,OAAO,gB,gCCqCjEC,EAzCQ,WACnB,IAAMC,EAAQC,MACd,EAA4BC,mBAASN,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KACMC,EAAqBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,QAI7D,OACI,cAAC,IAAD,CAAKC,gBAAiBV,EACtBW,KAAK,QACLC,QAAS,CAACC,GAAG,iBAAkBC,GAAI,iBAAkBC,GAAI,kBAAmBC,GAAI,mBAFhF,SAII,cAAC,IAAD,CACAN,gBAAgB,QAChBC,KAAK,QACLC,QAAQ,OAHR,SAKI,eAAC,IAAD,CAAKK,QAAQ,OACbC,cAAc,SADd,UAGI,eAAC,IAAD,CACAD,QAAQ,OACRC,cAAc,SAFd,UAGI,cAAC,IAAD,CAAMC,SAAS,MAAMnB,MAAOA,EAA5B,SAAoCG,EAAOE,GAAoBR,QAC/D,eAAC,IAAD,CAAMuB,UAAU,WAAWD,SAAS,KAAKP,QAAQ,OAAOZ,MAAOA,EAA/D,eAAyEG,EAAOE,GAAoBP,aAExG,eAAC,IAAD,CAAKmB,QAAQ,OACbI,eAAe,gBADf,UAGI,eAAC,IAAD,WACI,cAAC,IAAD,CAAYC,GAAG,IAAIC,OAAO,SAASC,QAAQ,UAAUC,KAAK,wBAAwBC,aAAW,UAAUC,KAAM,cAAC,IAAD,IAAcC,OAAO,UAAUlB,gBAAiBV,EAAOA,MAAM,UAC1K,cAAC,IAAD,CAAY0B,aAAW,SAASC,KAAM,cAAC,IAAD,IAAajB,gBAAiBV,EAAOA,MAAM,aAErF,cAAC,IAAD,CAAQU,gBAAiBV,EAAOA,MAAM,QAAQ6B,QA7BrC,WACzBzB,EAAU,YAAID,KA4BE,kCC3BT2B,MARf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YClH5B1B,M","file":"static/js/main.389483de.chunk.js","sourcesContent":["export const theQuotes = [\n    {quote: `The greatest glory in living lies not in never falling, but in rising every time we fall.\n    `, author: `Nelson Mandela`},\n    {quote: `Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma â€“ which is living with the results of other people's thinking.\n    `, author: `Steve Jobs`},\n    {quote: `If life were predictable it would cease to be life, and be without flavor.`, author: `Eleanor Roosevelt`},\n    {quote: `If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\n    `, author: `Oprah Winfrey`},\n    {quote: `If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\n    `, author: `James Cameron`},\n    {quote: `Life is what happens when you're busy making other plans.`, author: `John Lennon`},\n];","import React, { useState } from 'react';\nimport { Button, Text, Box, IconButton } from '@chakra-ui/react';\nimport { theQuotes } from '../data/QuotesArray';\nimport randomcolor from 'randomcolor';\nimport { FaTwitter, FaTumblr } from 'react-icons/fa';\n\nconst QuoteGenerator = () => {\n    const color = randomcolor();\n    const [quotes, setQuotes] = useState(theQuotes);\n    const generateQuoteIndex = Math.floor(Math.random() * quotes.length);\n    const handleGenerateButton = () => {\n        setQuotes([...quotes]);\n    }\n    return (\n        <Box backgroundColor={color}\n        minH=\"100vh\"\n        padding={{sm:\"150px 2em 10px\", md: \"150px 6em 10px\", lg: \"150px 18em 10px\", xl: \"150px 24em 10px\"}}\n        >\n            <Box \n            backgroundColor=\"white\"\n            minH=\"300px\"\n            padding=\"50px\"\n            >\n                <Box display=\"flex\"\n                flexDirection=\"column\"\n                >\n                    <Box \n                    display=\"flex\"\n                    flexDirection=\"column\">\n                        <Text fontSize=\"3xl\" color={color}>{quotes[generateQuoteIndex].quote}</Text>\n                        <Text alignSelf=\"flex-end\" fontSize=\"md\" padding=\"20px\" color={color}>- {quotes[generateQuoteIndex].author}</Text>\n                    </Box>\n                    <Box display=\"flex\"\n                    justifyContent=\"space-between\"\n                    >\n                        <Box>\n                            <IconButton as=\"a\" target=\"_blank\" variant=\"outline\" href=\"https://chakra-ui.com\" aria-label=\"Twitter\" icon={<FaTwitter/>} margin=\"0px 5px\" backgroundColor={color} color=\"white\"/>\n                            <IconButton aria-label=\"Tumblr\" icon={<FaTumblr/>} backgroundColor={color} color=\"white\"/>\n                        </Box>\n                        <Button backgroundColor={color} color=\"white\" onClick={handleGenerateButton}>New Quote</Button>\n                    </Box>\n                </Box>\n            </Box>\n      </Box>\n    );\n}\n \nexport default QuoteGenerator;","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport QuoteGenerator from './components/QuoteGenerator';\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <QuoteGenerator />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}